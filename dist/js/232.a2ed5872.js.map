{"version":3,"file":"js/232.a2ed5872.js","mappings":"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","sources":["webpack://studyweb/./src/services/exam.js","webpack://studyweb/./src/components/Exam/DoExamComponent.vue","webpack://studyweb/./src/components/Exam/DoExamComponent.vue?633f"],"sourcesContent":["import request from '../utils/request';\r\n\r\nexport function createExam(data) {\r\n    console.log(data)\r\n    return request({url: '/exam/createNew', method: 'post', data: data})\r\n}\r\nexport function doExam(data) { // console.log(params)\r\n    console.log(data)\r\n    return request({url: '/exam/do', method: 'put', data: data})\r\n}\r\nexport function getExamHistory(idTest, params) {\r\n\r\n    return request({\r\n        url: '/test/' + idTest + '/exam',\r\n        method: 'get',\r\n        params: params\r\n    })\r\n}\r\nexport function saveMark(idExam, data) {\r\n    return request({\r\n        url: '/exam/' + idExam + '/mark',\r\n        method: 'PUT',\r\n        data: data\r\n    })\r\n\r\n}\r\nexport function submitExam(idTest, data) { // console.log(params)\r\n    return request({\r\n        url: '/test/' + idTest + '/submit',\r\n        method: 'put',\r\n        data: data\r\n    })\r\n}\r\nexport function getReportExam(examId) {\r\n    return request({\r\n        url: '/exam/' + examId + '/report',\r\n        method: 'GET'\r\n    })\r\n\r\n}\r\n","<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n    <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n    <div class=\"info-list-question\">\r\n        <h1>Làm bài thi</h1>\r\n        <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n        <template v-else>\r\n            <div class=\"page\">\r\n                <h2>\r\n                    Trang {{ currentPage }}\r\n                </h2>\r\n            </div>\r\n            <QuestionComponent v-for=\"(question, index) in  questions\" :key=\"index\" :question=\"question\"\r\n                :ref=\"'question_' + question.question.question_id\" :id=\"'question_' + question.question.question_id\"\r\n                :index=\"startIndex + index\" :type=\"1\" />\r\n            <div class=\"end-action\">\r\n\r\n                <button class=\"update-create-question-button\" @click=\"save\" v-if=\"canUpdate\">\r\n                    Lưu câu trả lời\r\n                </button>\r\n                <button class=\"update-create-question-button\" @click=\"submit\" v-if=\"currentPage == totalPage\">\r\n                    Nộp bài\r\n                </button>\r\n            </div>\r\n            <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                :active-class=\"'active-class'\">\r\n            </paginate>\r\n        </template>\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nimport QuestionComponent from '../Question/QuestionComponent.vue';\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getQuestionTestDo } from '../../services/question'\r\nimport { getNumericalQuestion } from '../../services/test'\r\nimport { doExam, submitExam } from '../../services/exam'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nexport default {\r\n    name: \"DoExamComponent\",\r\n    inheritAttrs: false,\r\n    components: {\r\n        QuestionComponent,\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        LoadingComponent\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const isLoading = ref(false)\r\n        const canUpdate = ref(true)\r\n        const isUpdateEssay = ref(false)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const answersData = ref([])\r\n        const sendData = ref({ 'answers': new Set() })\r\n        return {\r\n            idTest,\r\n            isLoading,\r\n            canUpdate,\r\n            isUpdateEssay,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            indexNewQuestion,\r\n            answersData,\r\n            sendData,\r\n            render\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            examId: null\r\n        }\r\n    },\r\n    created() {\r\n\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = []\r\n            this.sendData = { 'answers': new Set() }\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getQuestionTestDo(this.idTest, paramsQuestion);\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    this.answersData = responseQuestions.data?.answers\r\n                    this.examId = responseQuestions.data?.exam_id\r\n                    console.log(responseQuestions.data?.pages)\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    exam_id: this.examId,\r\n                    current_page: this.currentPage,\r\n                    type: 1\r\n                    // 1: Do 2: Update 3: History\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical.data\r\n\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n\r\n        // choiceAnswer(id) {\r\n        //     var answer = document.getElementById(\"question_\" + id);\r\n        //     answer.classList.add(\"answer-content-choice\");\r\n        // },\r\n        clickCallback(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Next(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        moveQuestion(page, id) {\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n            }\r\n        },\r\n        async save() {\r\n            this.questions.forEach(question => {\r\n                let q = this.$refs['question_' + question.question.question_id]\r\n                if (q[0].answer != -1) {\r\n                    let answer = {\r\n                        question_id: question.question.question_id,\r\n                        // exam_id: this.examId,\r\n                        answer: q[0].answer\r\n                    }\r\n                    this.sendData.answers.add(answer)\r\n                }\r\n            });\r\n          \r\n            await doExam({ exam_id: this.examId, current_page: this.currentPage, answers: Array.from(this.sendData.answers) })\r\n            this.handleGetData()\r\n            this.refreshData()\r\n            this.render = false\r\n            this.$nextTick(() => {\r\n                this.render = true\r\n            })\r\n        },\r\n        async submit() {\r\n            await submitExam(this.idTest, { examId: this.examId })\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.create-button-first {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.info-list-question {\r\n    width: 78%;\r\n    margin-top: 3px;\r\n    margin-right: 2px;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.end-action {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.pagination {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>","import { render } from \"./DoExamComponent.vue?vue&type=template&id=7aa6d904\"\nimport script from \"./DoExamComponent.vue?vue&type=script&lang=js\"\nexport * from \"./DoExamComponent.vue?vue&type=script&lang=js\"\n\nimport \"./DoExamComponent.vue?vue&type=style&index=0&id=7aa6d904&lang=css\"\n\nimport exportComponent from \"G:\\\\Dự án Web học tập\\\\studyweb\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["createExam","data","console","log","request","url","method","doExam","getExamHistory","idTest","params","saveMark","idExam","submitExam","getReportExam","examId","class","_createElementVNode","_createVNode","_component_NavbarListComponent","numericalQuestion","$setup","onMoveQuestion","$options","moveQuestion","_hoisted_1","_hoisted_2","isLoading","_createBlock","_component_LoadingComponent","key","_createElementBlock","_Fragment","_hoisted_3","_toDisplayString","currentPage","_renderList","questions","question","index","_component_QuestionComponent","ref","question_id","id","startIndex","type","_hoisted_4","canUpdate","onClick","_cache","args","save","totalPage","submit","_component_paginate","clickCallback","name","inheritAttrs","components","QuestionComponent","paginate","Paginate","NavbarListComponent","LoadingComponent","setup","parseInt","useRoute","isUpdateEssay","moveTo","render","indexNewQuestion","answersData","sendData","Set","created","this","$watch","$route","query","handleGetData","mounted","methods","refreshData","listQuestionFollow","questionsDelete","async","paramsQuestion","current_page","responseQuestions","getQuestionTestDo","answers","exam_id","pages","paramsNumerical","responseNumerical","getNumericalQuestion","pageNum","Next","page","Prev","document","getElementById","scrollIntoView","setTimeout","forEach","q","$refs","answer","add","Array","from","$nextTick","__exports__"],"sourceRoot":""}
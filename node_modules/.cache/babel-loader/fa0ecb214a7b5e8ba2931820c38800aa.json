{"ast":null,"code":"import Paginate from 'vuejs-paginate-next';\nimport { getExamHistory } from '../../services/exam';\nimport { getNumericalQuestion } from '../../services/test'; // import { saveMark } from '../../services/exam'\n\nimport { ref } from '@vue/reactivity';\nimport { useRoute } from 'vue-router';\nimport LoadingComponent from '../common/LoadingComponent.vue';\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\";\nimport MarkQuestionComponent from \"./MarkQuestionComponent.vue\";\nexport default {\n  name: \"MarkTestComponent\",\n  components: {\n    paginate: Paginate,\n    NavbarListComponent,\n    LoadingComponent,\n    MarkQuestionComponent\n  },\n\n  setup() {\n    const idTest = parseInt(useRoute().params.idTest);\n    const idExam = parseInt(useRoute().params.idExam);\n    const isLoading = ref(false);\n    const isUpdateEssay = ref(false);\n    const questions = ref([]);\n    const currentPage = ref(1);\n    const totalPage = ref(1);\n    const startIndex = ref(1);\n    const numericalQuestion = ref([]);\n    const moveTo = ref(\"\");\n    const render = ref(true);\n    const indexNewQuestion = ref(0);\n    const sendData = ref({\n      mark: new Map()\n    }); // const answersUpdate = ref([])\n    // const answersDelete = ref([])\n    // const answersCreate = ref([])\n\n    return {\n      idTest,\n      idExam,\n      isLoading,\n      isUpdateEssay,\n      questions,\n      currentPage,\n      totalPage,\n      startIndex,\n      numericalQuestion,\n      moveTo,\n      sendData,\n      indexNewQuestion,\n      render\n    };\n  },\n\n  create() {\n    this.$watch(() => this.$route.query, () => {\n      this.handleGetData();\n    });\n  },\n\n  mounted() {\n    this.handleGetData();\n  },\n\n  methods: {\n    refreshData() {\n      this.listQuestionFollow = new Set(), this.questionsDelete = [], this.sendData = new Set();\n    },\n\n    async handleGetData() {\n      var paramsQuestion = {\n        idExam: this.idExam,\n        current_page: this.currentPage\n      };\n\n      try {\n        const responseQuestions = await getExamHistory(this.idTest, paramsQuestion); // console.log(responseQuestions)\n\n        if (responseQuestions) {\n          this.questions = responseQuestions.data?.questions;\n          this.answersData = responseQuestions.data?.answers;\n          this.idExam = responseQuestions.data?.exam_id;\n          this.isOwner = responseQuestions.data?.isOwner;\n          console.log(responseQuestions.data?.pages);\n          let pages = responseQuestions.data?.pages;\n          this.startIndex = pages.startIndex;\n          this.totalPage = pages.totalPage;\n        }\n\n        var paramsNumerical = {\n          current_page: this.currentPage,\n          exam_id: this.idExam,\n          type: 4 // 1: Do 2: Update 3: History 4 Mark\n\n        };\n        const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical);\n\n        if (responseNumerical) {\n          this.numericalQuestion = responseNumerical.data;\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    choiceAnswer(id) {\n      var answer = document.getElementById(\"question_\" + id);\n      answer.classList.add(\"answer-content-choice\");\n    },\n\n    clickCallback(pageNum) {\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    Next(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    Prev(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    moveQuestion(page, id) {\n      if (page == this.currentPage) {\n        this.moveTo = id;\n        let question = document.getElementById(id);\n        question.scrollIntoView();\n      } else {\n        this.currentPage = page;\n        this.moveTo = id;\n        this.handleGetData();\n        setTimeout(() => {\n          let question = document.getElementById(id);\n          question.scrollIntoView();\n        }, 1000);\n      }\n    },\n\n    markPoint(data) {\n      // data.exam_id = this.idExam\n      this.sendData.mark.set(data.question_id, data);\n    },\n\n    async save() {\n      console.log(Array.from(this.sendData.mark.values()));\n      let data = {\n        exam_id: this.idExam,\n        curent_page: this.currentPage,\n        mark: Array.from(this.sendData.mark.values())\n      };\n      await saveMark(data);\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Paginate","getExamHistory","getNumericalQuestion","ref","useRoute","LoadingComponent","NavbarListComponent","MarkQuestionComponent","name","components","paginate","setup","idTest","parseInt","params","idExam","isLoading","isUpdateEssay","questions","currentPage","totalPage","startIndex","numericalQuestion","moveTo","render","indexNewQuestion","sendData","mark","Map","create","$watch","$route","query","handleGetData","mounted","methods","refreshData","listQuestionFollow","Set","questionsDelete","paramsQuestion","current_page","responseQuestions","data","answersData","answers","exam_id","isOwner","console","log","pages","paramsNumerical","type","responseNumerical","choiceAnswer","id","answer","document","getElementById","classList","add","clickCallback","pageNum","Next","page","Prev","moveQuestion","question","scrollIntoView","setTimeout","markPoint","set","question_id","save","Array","from","values","curent_page","saveMark"],"sourceRoot":"","sources":["G:\\Dự án Web học tập\\studyweb\\src\\components\\Exam\\MarkExamComponent.vue"],"sourcesContent":["<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n\r\n    <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n\r\n    <div class=\"info-list-question\">\r\n        <div class=\"mark-header\">\r\n            <h1>Chấm bài thi</h1>\r\n            <h3>Điểm 9</h3>\r\n            <div class=\"mark-type-question\">\r\n                <h3>Câu hỏi</h3>\r\n                <div class=\"menu-create\">\r\n                    <button class=\"create-button-type\" @click=\"createQuestion(2)\">\r\n                        Trắc nghiệm\r\n                    </button>\r\n                    <button class=\"create-button-type\" @click=\"createQuestion(1)\">\r\n                        Điền đáp án\r\n                    </button>\r\n                    <button class=\"create-button-type\" @click=\"createQuestion(3)\">\r\n                        Tự luận\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n        <template v-else>\r\n            <div class=\"page\">\r\n                <h2>\r\n                    Trang {{ currentPage }}\r\n                </h2>\r\n            </div>\r\n            <div v-for=\"(question, index) in  questions\" :key=\"index\">\r\n                <MarkQuestionComponent :question=\"question\" :index=\"startIndex + index\"\r\n                    :ref=\"'question_' + question.question.question_id\" :id=\"'question_' + question.question.question_id\"\r\n                    @mark=\"markPoint\" />\r\n            </div>\r\n            <div class=\"end-action\">\r\n                <button class=\"update-create-question-button\" @click=\"save\">\r\n                    Lưu trang\r\n                </button>\r\n            </div>\r\n            <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                :active-class=\"'active-class'\">\r\n            </paginate>\r\n\r\n        </template>\r\n\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getExamHistory } from '../../services/exam'\r\nimport { getNumericalQuestion } from '../../services/test'\r\n// import { saveMark } from '../../services/exam'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nimport MarkQuestionComponent from \"./MarkQuestionComponent.vue\"\r\nexport default {\r\n    name: \"MarkTestComponent\",\r\n    components: {\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        LoadingComponent,\r\n        MarkQuestionComponent\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const idExam = parseInt(useRoute().params.idExam)\r\n        const isLoading = ref(false)\r\n        const isUpdateEssay = ref(false)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const sendData = ref({\r\n            mark: new Map()\r\n        })\r\n        // const answersUpdate = ref([])\r\n        // const answersDelete = ref([])\r\n        // const answersCreate = ref([])\r\n        return {\r\n            idTest,\r\n            idExam,\r\n            isLoading,\r\n            isUpdateEssay,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            sendData,\r\n            indexNewQuestion,\r\n            render\r\n        }\r\n    },\r\n\r\n    create() {\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = [],\r\n                this.sendData = new Set()\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                idExam: this.idExam,\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getExamHistory(this.idTest, paramsQuestion);\r\n                // console.log(responseQuestions)\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    this.answersData = responseQuestions.data?.answers\r\n                    this.idExam = responseQuestions.data?.exam_id\r\n                    this.isOwner = responseQuestions.data?.isOwner\r\n                    console.log(responseQuestions.data?.pages)\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    current_page: this.currentPage,\r\n                    exam_id: this.idExam,\r\n                    type: 4\r\n                    // 1: Do 2: Update 3: History 4 Mark\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical.data\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n\r\n        choiceAnswer(id) {\r\n            var answer = document.getElementById(\"question_\" + id);\r\n            answer.classList.add(\"answer-content-choice\");\r\n        },\r\n        clickCallback(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Next(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        moveQuestion(page, id) {\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n            }\r\n        },\r\n        markPoint(data) {\r\n            // data.exam_id = this.idExam\r\n            this.sendData.mark.set(data.question_id, data)\r\n        },\r\n        async save() {\r\n            console.log(Array.from(this.sendData.mark.values()))\r\n            let data = {\r\n                exam_id: this.idExam,\r\n                curent_page: this.currentPage,\r\n                mark: Array.from(this.sendData.mark.values())\r\n            }\r\n            await saveMark(data)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.mark-type-question {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-left: 15px;\r\n}\r\n\r\n.menu-create {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.create-button-type {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.blue {\r\n    background-color: blue;\r\n}\r\n\r\n.green {\r\n    background-color: green;\r\n}\r\n\r\n.create-button-first {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.info-list-question {\r\n    width: 78%;\r\n    margin-top: 3px;\r\n    margin-right: 2px;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.end-action {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.pagination {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import QuestionComponent from '../Question/QuestionComponent.vue';\nimport Paginate from 'vuejs-paginate-next';\nimport { getNumericalQuestion } from '../../services/test';\nimport { ref } from '@vue/reactivity';\nimport { useRoute } from 'vue-router';\nimport LoadingComponent from '../common/LoadingComponent.vue';\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\";\nimport { getExamHistory } from '@/services/exam';\nexport default {\n  name: \"HistoryExamComponent\",\n  components: {\n    QuestionComponent,\n    paginate: Paginate,\n    NavbarListComponent,\n    LoadingComponent\n  },\n\n  setup() {\n    const idTest = parseInt(useRoute().params.idTest);\n    const isLoading = ref(false);\n    const canUpdate = ref(true);\n    const questions = ref([]);\n    const currentPage = ref(1);\n    const totalPage = ref(1);\n    const startIndex = ref(1);\n    const numericalQuestion = ref([]);\n    const moveTo = ref(\"\");\n    const render = ref(true);\n    const indexNewQuestion = ref(0);\n    const isOwner = ref(false);\n    return {\n      idTest,\n      isLoading,\n      canUpdate,\n      questions,\n      currentPage,\n      totalPage,\n      startIndex,\n      numericalQuestion,\n      moveTo,\n      indexNewQuestion,\n      isOwner,\n      render\n    };\n  },\n\n  create() {\n    this.$watch(() => this.$route.query, () => {\n      this.handleGetData();\n    });\n  },\n\n  data() {\n    return {\n      examId: \"\"\n    };\n  },\n\n  mounted() {\n    this.handleGetData();\n  },\n\n  methods: {\n    refreshData() {\n      this.listQuestionFollow = new Set(), this.questionsDelete = [], this.sendData = {\n        'questions': {\n          'create': [],\n          'update': [],\n          'delete': [],\n          'deleteResult': [],\n          // Question fill and essay\n          'updateResults': [] // Question fill and essay\n\n        },\n        'choices': {\n          'create': [],\n          'update': [],\n          'delete': []\n        }\n      };\n    },\n\n    async handleGetData() {\n      var paramsQuestion = {\n        idExam: this.examId,\n        current_page: this.currentPage\n      };\n\n      try {\n        const responseQuestions = await getExamHistory(this.idTest, paramsQuestion);\n\n        if (responseQuestions) {\n          this.questions = responseQuestions.data?.questions;\n          this.answersData = responseQuestions.data?.answers;\n          this.examId = responseQuestions.data?.exam_id;\n          this.isOwner = responseQuestions.data?.isOwner;\n          console.log(responseQuestions.data?.pages);\n          let pages = responseQuestions.data?.pages;\n          this.startIndex = pages.startIndex;\n          this.totalPage = pages.totalPage;\n        }\n\n        var paramsNumerical = {\n          exam_id: this.examId,\n          current_page: this.currentPage,\n          type: 3 // 1: Do 2: Update 3: History\n\n        };\n        const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical);\n\n        if (responseNumerical) {\n          this.numericalQuestion = responseNumerical.data;\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    addlistQuestionFollow(id) {\n      // Add id question to list question update\n      console.log(id);\n      this.listQuestionFollow.add(id);\n    },\n\n    choiceAnswer(id) {\n      var answer = document.getElementById(\"question_\" + id);\n      answer.classList.add(\"answer-content-choice\");\n    },\n\n    clickCallback(pageNum) {\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    Next(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    Prev(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    createQuestion() {\n      let newQuestion = {};\n      newQuestion.question = {\n        'question_id': 'new_' + this.indexNewQuestion,\n        'page': this.currentPage,\n        \"type\": 2,\n        'index': this.questions.length,\n        'result_id': \"\",\n        'contentResult': \"\",\n        'scope': 1,\n        'dependence_id': this.idTest\n      };\n      this.indexNewQuestion++;\n      newQuestion.choices = [];\n      this.questions.push(newQuestion);\n      let item = {\n        'id': newQuestion.question.question_id,\n        'page': this.currentPage,\n        'index': this.questions.length,\n        'type': 2\n      };\n      this.numericalQuestion.data.splice(this.startIndex + this.questions.length - 2, 0, item);\n      setTimeout(() => {\n        let question = document.getElementById('question_' + newQuestion.question.question_id);\n        question.scrollIntoView();\n      }, 500);\n    },\n\n    deleteQuestion(deleteQuestion) {\n      // this.questions\n      this.render = false;\n      this.questions.splice(deleteQuestion.index - this.startIndex, 1);\n      this.numericalQuestion.data.splice(deleteQuestion.index, 1); // console.log(\"Delete \" + ('' + deleteQuestion.id).includes('new_'))\n\n      let q = this.$refs['question_' + deleteQuestion.id][0]; // console.log(\"Ref\")\n      // console.log(q)\n\n      if (deleteQuestion.result != undefined) {\n        this.sendData.deleteResults.push(deleteQuestion.result);\n      }\n\n      if (('' + deleteQuestion.id).includes('new_')) {\n        if (this.questionsCreate.get(deleteQuestion.id) !== undefined) {\n          this.questionsCreate.delete(deleteQuestion.id);\n        }\n      } else {\n        this.sendData.choices.delete = [...Array.from(q.chooseDelete)];\n        this.questionsDelete.push(deleteQuestion.id);\n      }\n\n      this.$nextTick(() => {\n        this.render = true;\n      });\n    },\n\n    moveQuestion(page, id) {\n      if (page == this.currentPage) {\n        this.moveTo = id;\n        let question = document.getElementById(id);\n        question.scrollIntoView();\n      } else {\n        this.currentPage = page;\n        this.moveTo = id;\n        this.handleGetData();\n        setTimeout(() => {\n          let question = document.getElementById(id);\n          question.scrollIntoView();\n        }, 1000);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6BA,OAAOA,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,eAAe;EACXC,IAAI,EAAE,sBADK;EAEXC,UAAU,EAAE;IACRT,iBADQ;IAERU,QAAQ,EAAET,QAFF;IAGRK,mBAHQ;IAIRD;EAJQ,CAFD;;EAQXM,KAAK,GAAG;IACJ,MAAMC,MAAK,GAAIC,QAAQ,CAACT,QAAQ,GAAGU,MAAX,CAAkBF,MAAnB,CAAvB;IACA,MAAMG,SAAQ,GAAIZ,GAAG,CAAC,KAAD,CAArB;IACA,MAAMa,SAAQ,GAAIb,GAAG,CAAC,IAAD,CAArB;IACA,MAAMc,SAAQ,GAAId,GAAG,CAAC,EAAD,CAArB;IACA,MAAMe,WAAU,GAAIf,GAAG,CAAC,CAAD,CAAvB;IACA,MAAMgB,SAAQ,GAAIhB,GAAG,CAAC,CAAD,CAArB;IACA,MAAMiB,UAAS,GAAIjB,GAAG,CAAC,CAAD,CAAtB;IACA,MAAMkB,iBAAgB,GAAIlB,GAAG,CAAC,EAAD,CAA7B;IACA,MAAMmB,MAAK,GAAInB,GAAG,CAAC,EAAD,CAAlB;IACA,MAAMoB,MAAK,GAAIpB,GAAG,CAAC,IAAD,CAAlB;IACA,MAAMqB,gBAAe,GAAIrB,GAAG,CAAC,CAAD,CAA5B;IACA,MAAMsB,OAAM,GAAItB,GAAG,CAAC,KAAD,CAAnB;IACA,OAAO;MACHS,MADG;MAEHG,SAFG;MAGHC,SAHG;MAIHC,SAJG;MAKHC,WALG;MAMHC,SANG;MAOHC,UAPG;MAQHC,iBARG;MASHC,MATG;MAUHE,gBAVG;MAWHC,OAXG;MAYHF;IAZG,CAAP;EAcH,CAnCU;;EAqCXG,MAAM,GAAG;IACL,KAAKC,MAAL,CACI,MAAM,KAAKC,MAAL,CAAYC,KADtB,EAEI,MAAM;MACF,KAAKC,aAAL;IACJ,CAJJ;EAMH,CA5CU;;EA6CXC,IAAI,GAAG;IACH,OAAO;MACHC,MAAM,EAAE;IADL,CAAP;EAGH,CAjDU;;EAkDXC,OAAO,GAAG;IACN,KAAKH,aAAL;EACH,CApDU;;EAqDXI,OAAO,EAAE;IACLC,WAAW,GAAG;MACV,KAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B,EACI,KAAKC,eAAL,GAAuB,EAD3B,EAEI,KAAKC,QAAL,GAAgB;QACZ,aAAa;UACT,UAAU,EADD;UAET,UAAU,EAFD;UAGT,UAAU,EAHD;UAIT,gBAAgB,EAJP;UAIW;UACpB,iBAAiB,EALR,CAKW;;QALX,CADD;QAQZ,WAAW;UACP,UAAU,EADH;UAEP,UAAU,EAFH;UAGP,UAAU;QAHH;MARC,CAFpB;IAgBH,CAlBI;;IAmBL,MAAMT,aAAN,GAAsB;MAElB,IAAIU,cAAa,GAAI;QACjBC,MAAM,EAAE,KAAKT,MADI;QAEjBU,YAAY,EAAE,KAAKxB;MAFF,CAArB;;MAIA,IAAI;QACA,MAAMyB,iBAAgB,GAAI,MAAMpC,cAAc,CAAC,KAAKK,MAAN,EAAc4B,cAAd,CAA9C;;QACA,IAAIG,iBAAJ,EAAuB;UACnB,KAAK1B,SAAL,GAAiB0B,iBAAiB,CAACZ,IAAlB,EAAwBd,SAAzC;UACA,KAAK2B,WAAL,GAAmBD,iBAAiB,CAACZ,IAAlB,EAAwBc,OAA3C;UACA,KAAKb,MAAL,GAAcW,iBAAiB,CAACZ,IAAlB,EAAwBe,OAAtC;UACA,KAAKrB,OAAL,GAAekB,iBAAiB,CAACZ,IAAlB,EAAwBN,OAAvC;UACAsB,OAAO,CAACC,GAAR,CAAYL,iBAAiB,CAACZ,IAAlB,EAAwBkB,KAApC;UACA,IAAIA,KAAI,GAAIN,iBAAiB,CAACZ,IAAlB,EAAwBkB,KAApC;UACA,KAAK7B,UAAL,GAAkB6B,KAAK,CAAC7B,UAAxB;UACA,KAAKD,SAAL,GAAiB8B,KAAK,CAAC9B,SAAvB;QACJ;;QACA,IAAI+B,eAAc,GAAI;UAClBJ,OAAO,EAAE,KAAKd,MADI;UAElBU,YAAY,EAAE,KAAKxB,WAFD;UAGlBiC,IAAI,EAAE,CAHY,CAIlB;;QAJkB,CAAtB;QAMA,MAAMC,iBAAgB,GAAI,MAAMlD,oBAAoB,CAAC,KAAKU,MAAN,EAAcsC,eAAd,CAApD;;QACA,IAAIE,iBAAJ,EAAuB;UACnB,KAAK/B,iBAAL,GAAyB+B,iBAAiB,CAACrB,IAA3C;QACJ;MACJ,CAtBA,SAsBU;QACN,KAAKhB,SAAL,GAAiB,KAAjB;MACJ;IACH,CAlDI;;IAmDLsC,qBAAqB,CAACC,EAAD,EAAK;MACtB;MACAP,OAAO,CAACC,GAAR,CAAYM,EAAZ;MACA,KAAKlB,kBAAL,CAAwBmB,GAAxB,CAA4BD,EAA5B;IACH,CAvDI;;IAwDLE,YAAY,CAACF,EAAD,EAAK;MACb,IAAIG,MAAK,GAAIC,QAAQ,CAACC,cAAT,CAAwB,cAAcL,EAAtC,CAAb;MACAG,MAAM,CAACG,SAAP,CAAiBL,GAAjB,CAAqB,uBAArB;IACH,CA3DI;;IA4DLM,aAAa,CAACC,OAAD,EAAU;MACnB,KAAK5C,WAAL,GAAmB4C,OAAnB;MACA,KAAKhC,aAAL;IACH,CA/DI;;IAgELiC,IAAI,CAACD,OAAD,EAAU;MACV,KAAKE,IAAL,GAAYF,OAAZ;MACA,KAAKhC,aAAL;IACH,CAnEI;;IAoELmC,IAAI,CAACH,OAAD,EAAU;MACV,KAAKE,IAAL,GAAYF,OAAZ;MACA,KAAKhC,aAAL;IACH,CAvEI;;IAwELoC,cAAc,GAAG;MACb,IAAIC,WAAU,GAAI,EAAlB;MAEAA,WAAW,CAACC,QAAZ,GAAuB;QAAE,eAAe,SAAS,KAAK5C,gBAA/B;QAAiD,QAAQ,KAAKN,WAA9D;QAA2E,QAAQ,CAAnF;QAAsF,SAAS,KAAKD,SAAL,CAAeoD,MAA9G;QAAsH,aAAa,EAAnI;QAAuI,iBAAiB,EAAxJ;QAA4J,SAAS,CAArK;QAAwK,iBAAiB,KAAKzD;MAA9L,CAAvB;MACA,KAAKY,gBAAL;MACA2C,WAAW,CAACG,OAAZ,GAAsB,EAAtB;MACA,KAAKrD,SAAL,CAAesD,IAAf,CAAoBJ,WAApB;MACA,IAAIK,IAAG,GAAI;QAAE,MAAML,WAAW,CAACC,QAAZ,CAAqBK,WAA7B;QAA0C,QAAQ,KAAKvD,WAAvD;QAAoE,SAAS,KAAKD,SAAL,CAAeoD,MAA5F;QAAoG,QAAQ;MAA5G,CAAX;MACA,KAAKhD,iBAAL,CAAuBU,IAAvB,CAA4B2C,MAA5B,CAAmC,KAAKtD,UAAL,GAAkB,KAAKH,SAAL,CAAeoD,MAAjC,GAA0C,CAA7E,EAAgF,CAAhF,EAAmFG,IAAnF;MAEAG,UAAU,CAAC,MAAM;QACb,IAAIP,QAAO,GAAIV,QAAQ,CAACC,cAAT,CAAwB,cAAcQ,WAAW,CAACC,QAAZ,CAAqBK,WAA3D,CAAf;QACAL,QAAQ,CAACQ,cAAT;MACH,CAHS,EAGP,GAHO,CAAV;IAIH,CAtFI;;IAwFLC,cAAc,CAACA,cAAD,EAAiB;MAE3B;MACA,KAAKtD,MAAL,GAAc,KAAd;MACA,KAAKN,SAAL,CAAeyD,MAAf,CAAsBG,cAAc,CAACC,KAAf,GAAuB,KAAK1D,UAAlD,EAA8D,CAA9D;MACA,KAAKC,iBAAL,CAAuBU,IAAvB,CAA4B2C,MAA5B,CAAmCG,cAAc,CAACC,KAAlD,EAAyD,CAAzD,EAL2B,CAM3B;;MACA,IAAIC,IAAI,KAAKC,KAAL,CAAW,cAAcH,cAAc,CAACvB,EAAxC,EAA4C,CAA5C,CAAR,CAP2B,CAQ3B;MACA;;MACA,IAAIuB,cAAc,CAACI,MAAf,IAAyBC,SAA7B,EAAwC;QACpC,KAAK3C,QAAL,CAAc4C,aAAd,CAA4BZ,IAA5B,CAAiCM,cAAc,CAACI,MAAhD;MACJ;;MACA,IAAI,CAAC,KAAKJ,cAAc,CAACvB,EAArB,EAAyB8B,QAAzB,CAAkC,MAAlC,CAAJ,EAA+C;QAC3C,IAAI,KAAKC,eAAL,CAAqBC,GAArB,CAAyBT,cAAc,CAACvB,EAAxC,MAAgD4B,SAApD,EAA+D;UAC3D,KAAKG,eAAL,CAAqBE,MAArB,CAA4BV,cAAc,CAACvB,EAA3C;QACJ;MACJ,CAJA,MAIO;QAEH,KAAKf,QAAL,CAAc+B,OAAd,CAAsBiB,MAAtB,GAA+B,CAAC,GAAGC,KAAK,CAACC,IAAN,CAAWV,CAAC,CAACW,YAAb,CAAJ,CAA/B;QACA,KAAKpD,eAAL,CAAqBiC,IAArB,CAA0BM,cAAc,CAACvB,EAAzC;MACJ;;MACA,KAAKqC,SAAL,CAAe,MAAM;QACjB,KAAKpE,MAAL,GAAc,IAAd;MACH,CAFD;IAGH,CAjHI;;IAkHLqE,YAAY,CAAC5B,IAAD,EAAOV,EAAP,EAAW;MAEnB,IAAIU,IAAG,IAAK,KAAK9C,WAAjB,EAA8B;QAC1B,KAAKI,MAAL,GAAcgC,EAAd;QACA,IAAIc,QAAO,GAAIV,QAAQ,CAACC,cAAT,CAAwBL,EAAxB,CAAf;QACAc,QAAQ,CAACQ,cAAT;MACJ,CAJA,MAIO;QACH,KAAK1D,WAAL,GAAmB8C,IAAnB;QACA,KAAK1C,MAAL,GAAcgC,EAAd;QACA,KAAKxB,aAAL;QACA6C,UAAU,CAAC,MAAM;UACb,IAAIP,QAAO,GAAIV,QAAQ,CAACC,cAAT,CAAwBL,EAAxB,CAAf;UACAc,QAAQ,CAACQ,cAAT;QACH,CAHS,EAGP,IAHO,CAAV;MAMJ;IACJ;;EAnIK;AArDE,CAAf","names":["QuestionComponent","Paginate","getNumericalQuestion","ref","useRoute","LoadingComponent","NavbarListComponent","getExamHistory","name","components","paginate","setup","idTest","parseInt","params","isLoading","canUpdate","questions","currentPage","totalPage","startIndex","numericalQuestion","moveTo","render","indexNewQuestion","isOwner","create","$watch","$route","query","handleGetData","data","examId","mounted","methods","refreshData","listQuestionFollow","Set","questionsDelete","sendData","paramsQuestion","idExam","current_page","responseQuestions","answersData","answers","exam_id","console","log","pages","paramsNumerical","type","responseNumerical","addlistQuestionFollow","id","add","choiceAnswer","answer","document","getElementById","classList","clickCallback","pageNum","Next","page","Prev","createQuestion","newQuestion","question","length","choices","push","item","question_id","splice","setTimeout","scrollIntoView","deleteQuestion","index","q","$refs","result","undefined","deleteResults","includes","questionsCreate","get","delete","Array","from","chooseDelete","$nextTick","moveQuestion"],"sourceRoot":"","sources":["G:\\Dự án Web học tập\\studyweb\\src\\components\\Exam\\HistoryExamComponent.vue"],"sourcesContent":["<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n    <div class=\"history-exam\">\r\n        <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n        <div class=\"info-list-question\">\r\n            <slot name=\"tabs\"></slot>\r\n            <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n            <template v-else>\r\n                <button class=\"report-exam\">Báo cáo</button>\r\n                <div class=\"page\">\r\n                    <h2>\r\n                        Trang {{ currentPage }}\r\n                    </h2>\r\n                </div>\r\n                <QuestionComponent v-for=\"(question, index) in  questions\" :key=\"index\" :question=\"question\"\r\n                    :ref=\"'question_' + question.question.question_id\" :id=\"'question_' + question.question.question_id\"\r\n                    :index=\"startIndex + index\" :type=\"3\" :isOwner=\"isOwner\" />\r\n                <div class=\"end-action\">\r\n\r\n                </div>\r\n                <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                    :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                    :active-class=\"'active-class'\">\r\n                </paginate>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport QuestionComponent from '../Question/QuestionComponent.vue';\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getNumericalQuestion } from '../../services/test'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nimport { getExamHistory } from '@/services/exam';\r\nexport default {\r\n    name: \"HistoryExamComponent\",\r\n    components: {\r\n        QuestionComponent,\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        LoadingComponent,\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const isLoading = ref(false)\r\n        const canUpdate = ref(true)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const isOwner = ref(false)\r\n        return {\r\n            idTest,\r\n            isLoading,\r\n            canUpdate,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            indexNewQuestion,\r\n            isOwner,\r\n            render\r\n        }\r\n    },\r\n\r\n    create() {\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    data() {\r\n        return {\r\n            examId: \"\"\r\n        }\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = [],\r\n                this.sendData = {\r\n                    'questions': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                        'deleteResult': [], // Question fill and essay\r\n                        'updateResults': [] // Question fill and essay\r\n                    },\r\n                    'choices': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                    }\r\n                }\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                idExam: this.examId,\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getExamHistory(this.idTest, paramsQuestion);\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    this.answersData = responseQuestions.data?.answers\r\n                    this.examId = responseQuestions.data?.exam_id\r\n                    this.isOwner = responseQuestions.data?.isOwner\r\n                    console.log(responseQuestions.data?.pages)\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    exam_id: this.examId,\r\n                    current_page: this.currentPage,\r\n                    type: 3\r\n                    // 1: Do 2: Update 3: History\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical.data\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n        addlistQuestionFollow(id) {\r\n            // Add id question to list question update\r\n            console.log(id)\r\n            this.listQuestionFollow.add(id);\r\n        },\r\n        choiceAnswer(id) {\r\n            var answer = document.getElementById(\"question_\" + id);\r\n            answer.classList.add(\"answer-content-choice\");\r\n        },\r\n        clickCallback(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Next(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        createQuestion() {\r\n            let newQuestion = {\r\n            }\r\n            newQuestion.question = { 'question_id': 'new_' + this.indexNewQuestion, 'page': this.currentPage, \"type\": 2, 'index': this.questions.length, 'result_id': \"\", 'contentResult': \"\", 'scope': 1, 'dependence_id': this.idTest }\r\n            this.indexNewQuestion++\r\n            newQuestion.choices = []\r\n            this.questions.push(newQuestion)\r\n            let item = { 'id': newQuestion.question.question_id, 'page': this.currentPage, 'index': this.questions.length, 'type': 2 }\r\n            this.numericalQuestion.data.splice(this.startIndex + this.questions.length - 2, 0, item);\r\n\r\n            setTimeout(() => {\r\n                let question = document.getElementById('question_' + newQuestion.question.question_id);\r\n                question.scrollIntoView();\r\n            }, 500)\r\n        },\r\n\r\n        deleteQuestion(deleteQuestion) {\r\n\r\n            // this.questions\r\n            this.render = false\r\n            this.questions.splice(deleteQuestion.index - this.startIndex, 1)\r\n            this.numericalQuestion.data.splice(deleteQuestion.index, 1)\r\n            // console.log(\"Delete \" + ('' + deleteQuestion.id).includes('new_'))\r\n            let q = this.$refs['question_' + deleteQuestion.id][0]\r\n            // console.log(\"Ref\")\r\n            // console.log(q)\r\n            if (deleteQuestion.result != undefined) {\r\n                this.sendData.deleteResults.push(deleteQuestion.result)\r\n            }\r\n            if (('' + deleteQuestion.id).includes('new_')) {\r\n                if (this.questionsCreate.get(deleteQuestion.id) !== undefined) {\r\n                    this.questionsCreate.delete(deleteQuestion.id)\r\n                }\r\n            } else {\r\n\r\n                this.sendData.choices.delete = [...Array.from(q.chooseDelete)]\r\n                this.questionsDelete.push(deleteQuestion.id)\r\n            }\r\n            this.$nextTick(() => {\r\n                this.render = true\r\n            })\r\n        },\r\n        moveQuestion(page, id) {\r\n\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.pagination {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.report-exam {\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.report-exam:active {\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>"]},"metadata":{},"sourceType":"module"}
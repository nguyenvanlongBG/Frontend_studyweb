{"ast":null,"code":"import QuestionComponent from '../Question/QuestionComponent.vue';\nimport Paginate from 'vuejs-paginate-next';\nimport { getQuestionTestUpdate } from '../../services/question';\nimport { getTest, getNumericalQuestion, updateTest } from '../../services/test';\nimport { getItems } from '../../services/subject';\nimport { ref } from '@vue/reactivity';\nimport { useRoute } from 'vue-router';\nimport LoadingComponent from '../common/LoadingComponent.vue';\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\";\nimport QuestionBankComponent from \"../Test/QuestionBankComponent.vue\";\nexport default {\n  name: \"UpdateTestComponent\",\n  components: {\n    QuestionComponent,\n    paginate: Paginate,\n    NavbarListComponent,\n    QuestionBankComponent,\n    LoadingComponent\n  },\n\n  setup() {\n    const idTest = parseInt(useRoute().params.idTest);\n    const isLoading = ref(false);\n    const canUpdate = ref(true);\n    const questions = ref([]);\n    const currentPage = ref(1);\n    const totalPage = ref(1);\n    const startIndex = ref(1);\n    const numericalQuestion = ref([]);\n    const moveTo = ref(\"\");\n    const listQuestionFollow = ref(new Set());\n    const questionsDelete = ref([]);\n    const render = ref(true);\n    const indexNewQuestion = ref(0);\n    const displayTypeCreateFirst = ref(false);\n    const displayTypeCreateEnd = ref(false);\n    const displaySolution = ref(false);\n    const isOwner = ref(false);\n    const test = ref(null);\n    const isDisplayBank = ref(false);\n    const sendData = ref({\n      'questions': {\n        'create': [],\n        'update': [],\n        'delete': [],\n        'deleteResults': [],\n        // Question fill and essay\n        'updateResults': [] // Question fill and essay\n\n      },\n      'choices': {\n        'create': [],\n        'update': [],\n        'delete': []\n      }\n    });\n    const listItemsSubject = ref([]);\n    return {\n      idTest,\n      test,\n      isLoading,\n      canUpdate,\n      questions,\n      currentPage,\n      totalPage,\n      startIndex,\n      numericalQuestion,\n      moveTo,\n      listQuestionFollow,\n      questionsDelete,\n      sendData,\n      indexNewQuestion,\n      displayTypeCreateFirst,\n      displayTypeCreateEnd,\n      displaySolution,\n      isOwner,\n      listItemsSubject,\n      isDisplayBank,\n      render\n    };\n  },\n\n  create() {\n    this.$watch(() => this.$route.query, () => {\n      this.handleGetData();\n    });\n  },\n\n  mounted() {\n    this.handleGetData();\n    this.getItems();\n  },\n\n  methods: {\n    refreshData() {\n      this.listQuestionFollow = new Set(), this.questionsDelete = [], this.sendData = {\n        'questions': {\n          'create': [],\n          'update': [],\n          'delete': [],\n          'deleteResult': [],\n          // Question fill and essay\n          'updateResults': [] // Question fill and essay\n\n        },\n        'choices': {\n          'create': [],\n          'update': [],\n          'delete': []\n        }\n      };\n    },\n\n    async handleGetData() {\n      var paramsQuestion = {\n        current_page: this.currentPage\n      };\n\n      try {\n        const responseQuestions = await getQuestionTestUpdate(this.idTest, paramsQuestion);\n\n        if (responseQuestions) {\n          this.questions = responseQuestions.data?.questions;\n          this.itemsSubject = responseQuestions.data?.itemsSubject;\n          this.isOwner = responseQuestions.data?.isOwner;\n          let pages = responseQuestions.data?.pages;\n          this.startIndex = pages.startIndex;\n          this.currentPage = pages.currentPage;\n          this.totalPage = pages.totalPage;\n        }\n\n        var paramsNumerical = {\n          current_page: this.currentPage,\n          type: 2 // 1: Do 2: Update 3: History\n\n        };\n        const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical);\n\n        if (responseNumerical) {\n          this.numericalQuestion = responseNumerical.data;\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    async getItems() {\n      const response = await getTest(this.idTest);\n      this.test = response.data;\n      const responseItems = await getItems(this.test.subject_id);\n      this.listItemsSubject = responseItems.data;\n      console.log(\"List items\");\n      console.log(this.listItemsSubject);\n    },\n\n    addlistQuestionFollow(id) {\n      // Add id question to list question update\n      console.log(id);\n      this.listQuestionFollow.add(id);\n    },\n\n    choiceAnswer(id) {\n      var answer = document.getElementById(\"question_\" + id);\n      answer.classList.add(\"answer-content-choice\");\n    },\n\n    clickCallback(pageNum) {\n      console.log(pageNum);\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    async addPage() {\n      this.totalPage += 1;\n      let data = {\n        'id': this.idTest,\n        'total_page': this.totalPage\n      };\n\n      try {\n        await updateTest(data);\n        this.clickCallback(parseInt(this.currentPage) + 1);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.refreshData();\n      }\n    },\n\n    Next(pageNum) {\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    Prev(pageNum) {\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    displayBank() {\n      this.isDisplayBank = true;\n    },\n\n    closeBank() {\n      this.isDisplayBank = false;\n    },\n\n    displayCreateQuestionTypeFirst() {\n      this.displayTypeCreateFirst = !this.displayTypeCreateFirst;\n    },\n\n    displayCreateQuestionTypeEnd() {\n      this.displayTypeCreateEnd = !this.displayTypeCreateEnd;\n    },\n\n    createQuestion(type) {\n      let newQuestion = {};\n      newQuestion.question = {\n        'question_id': 'new_' + this.indexNewQuestion,\n        'page': this.currentPage,\n        \"type\": type,\n        'index': this.questions.length,\n        'result_id': \"\",\n        'contentResult': \"\",\n        'scope': 1,\n        'dependence_id': this.idTest\n      };\n\n      if (type == 1 || type == 3) {\n        newQuestion.question.result_id = \"new\";\n      }\n\n      this.indexNewQuestion++;\n      newQuestion.choices = [];\n      this.questions.push(newQuestion);\n      let item = {\n        'id': newQuestion.question.question_id,\n        'page': this.currentPage,\n        'index': this.questions.length,\n        'type': 0\n      };\n      this.numericalQuestion.data.splice(this.startIndex + this.questions.length - 2, 0, item);\n      setTimeout(() => {\n        let question = document.getElementById('question_' + newQuestion.question.question_id);\n        this.displayTypeCreateFirst = false;\n        this.displayTypeCreateEnd = false;\n        question.scrollIntoView();\n      }, 500);\n    },\n\n    deleteQuestion(deleteQuestion) {\n      // this.questions\n      this.render = false;\n      this.questions.splice(deleteQuestion.index - this.startIndex, 1);\n      this.numericalQuestion.data.splice(deleteQuestion.index, 1); // console.log(\"Delete \" + ('' + deleteQuestion.id).includes('new_'))\n\n      let q = this.$refs['question_' + deleteQuestion.id][0];\n\n      if (deleteQuestion.result != undefined) {\n        this.sendData.deleteResults.push(deleteQuestion.result);\n      }\n\n      if (('' + deleteQuestion.id).includes('new_')) {\n        if (this.questionsCreate.get(deleteQuestion.id) !== undefined) {\n          this.questionsCreate.delete(deleteQuestion.id);\n        }\n      } else {\n        this.sendData.choices.delete = [...Array.from(q.chooseDelete)];\n        this.questionsDelete.push(deleteQuestion.id);\n      }\n\n      this.$nextTick(() => {\n        this.render = true;\n      });\n    },\n\n    moveQuestion(page, id) {\n      if (page == this.currentPage) {\n        this.moveTo = id;\n        let question = document.getElementById(id);\n        question.scrollIntoView();\n      } else {\n        this.currentPage = page;\n        this.moveTo = id;\n        this.handleGetData();\n        setTimeout(() => {\n          let question = document.getElementById(id);\n          question.scrollIntoView();\n        }, 1000);\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["QuestionComponent","Paginate","getQuestionTestUpdate","getTest","getNumericalQuestion","updateTest","getItems","ref","useRoute","LoadingComponent","NavbarListComponent","QuestionBankComponent","name","components","paginate","setup","idTest","parseInt","params","isLoading","canUpdate","questions","currentPage","totalPage","startIndex","numericalQuestion","moveTo","listQuestionFollow","Set","questionsDelete","render","indexNewQuestion","displayTypeCreateFirst","displayTypeCreateEnd","displaySolution","isOwner","test","isDisplayBank","sendData","listItemsSubject","create","$watch","$route","query","handleGetData","mounted","methods","refreshData","paramsQuestion","current_page","responseQuestions","data","itemsSubject","pages","paramsNumerical","type","responseNumerical","response","responseItems","subject_id","console","log","addlistQuestionFollow","id","add","choiceAnswer","answer","document","getElementById","classList","clickCallback","pageNum","addPage","error","Next","Prev","displayBank","closeBank","displayCreateQuestionTypeFirst","displayCreateQuestionTypeEnd","createQuestion","newQuestion","question","length","result_id","choices","push","item","question_id","splice","setTimeout","scrollIntoView","deleteQuestion","index","q","$refs","result","undefined","deleteResults","includes","questionsCreate","get","delete","Array","from","chooseDelete","$nextTick","moveQuestion","page"],"sourceRoot":"","sources":["G:\\Dự án Web học tập\\studyweb\\src\\components\\Test\\UpdateTestComponent.vue"],"sourcesContent":["<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n    <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n    <QuestionBankComponent v-if=\"isDisplayBank\" @close=\"closeBank\" />\r\n    <div class=\"info-list-question\">\r\n        <h1>Chỉnh sửa đề thi</h1>\r\n        <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n        <template v-else>\r\n            <div class=\"page\">\r\n\r\n                <h2>\r\n                    Trang {{ currentPage }}\r\n                </h2>\r\n                <div class=\"menu-create\">\r\n                    <div class=\"choice-type-create\" v-if=\"displayTypeCreateFirst\">\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(2)\" v-if=\"canUpdate\">\r\n                            Trắc nghiệm\r\n                        </div>\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(1)\" v-if=\"canUpdate\">\r\n                            Điền đáp án\r\n                        </div>\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(3)\" v-if=\"canUpdate\">\r\n                            Tự luận\r\n                        </div>\r\n                    </div>\r\n                    <button class=\"create-button-first\" @click=\"displayCreateQuestionTypeFirst\" v-if=\"canUpdate\">\r\n                        Tạo câu hỏi\r\n                    </button>\r\n                    <button class=\"create-button-first\" @click=\"displayBank\" v-if=\"canUpdate\">\r\n                        + Ngân hàng\r\n                    </button>\r\n                    <button class=\"create-button-first\" @click=\"displayCreateQuestionTypeFirst\" v-if=\"canUpdate\">\r\n                        Import\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <QuestionComponent v-for=\"(question, index) in  questions\" :key=\"index\" :question=\"question\"\r\n                :ref=\"'question_' + question.question.question_id\" @create=\"createQuestion\" @update=\"updateQuestion()\"\r\n                @delete=\"deleteQuestion\" @addlistQuestionFollow=\"addlistQuestionFollow\"\r\n                :id=\"'question_' + question.question.question_id\" :index=\"startIndex + index\" :type=\"2\"\r\n                :isOwner=\"isOwner\" @seeSolution=\"seeSolution\" :listItemsSubject=\"listItemsSubject\" />\r\n            <div class=\"end-action\">\r\n                <div class=\"menu-create-end\">\r\n                    <div class=\"choice-type-create\" v-if=\"displayTypeCreateEnd\">\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(2)\" v-if=\"canUpdate\">\r\n                            Trắc nghiệm\r\n                        </div>\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(1)\" v-if=\"canUpdate\">\r\n                            Điền đáp án\r\n                        </div>\r\n                        <div class=\"create-button-type\" @click=\"createQuestion(3)\" v-if=\"canUpdate\">\r\n                            Tự luận\r\n                        </div>\r\n                    </div>\r\n                    <button class=\"update-create-question-button\" @click=\"displayCreateQuestionTypeEnd\"\r\n                        v-if=\"canUpdate\">\r\n                        Thêm câu hỏi\r\n                    </button>\r\n                </div>\r\n\r\n                <button class=\"update-create-question-button\" @click=\"addPage\"\r\n                    v-if=\"canUpdate && currentPage == totalPage\">\r\n                    Thêm trang\r\n                </button>\r\n            </div>\r\n            <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                :active-class=\"'active-class'\">\r\n            </paginate>\r\n        </template>\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nimport QuestionComponent from '../Question/QuestionComponent.vue';\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getQuestionTestUpdate } from '../../services/question'\r\nimport { getTest, getNumericalQuestion, updateTest } from '../../services/test'\r\nimport { getItems } from '../../services/subject'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nimport QuestionBankComponent from \"../Test/QuestionBankComponent.vue\"\r\nexport default {\r\n    name: \"UpdateTestComponent\",\r\n    components: {\r\n        QuestionComponent,\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        QuestionBankComponent,\r\n        LoadingComponent,\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const isLoading = ref(false)\r\n        const canUpdate = ref(true)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const listQuestionFollow = ref(new Set())\r\n        const questionsDelete = ref([])\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const displayTypeCreateFirst = ref(false)\r\n        const displayTypeCreateEnd = ref(false)\r\n        const displaySolution = ref(false)\r\n        const isOwner = ref(false)\r\n        const test = ref(null)\r\n        const isDisplayBank = ref(false)\r\n        const sendData = ref({\r\n            'questions': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n                'deleteResults': [], // Question fill and essay\r\n                'updateResults': [] // Question fill and essay\r\n\r\n            },\r\n            'choices': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n            }\r\n        })\r\n        const listItemsSubject = ref([])\r\n        return {\r\n            idTest,\r\n            test,\r\n            isLoading,\r\n            canUpdate,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            listQuestionFollow,\r\n            questionsDelete,\r\n            sendData,\r\n            indexNewQuestion,\r\n            displayTypeCreateFirst,\r\n            displayTypeCreateEnd,\r\n            displaySolution,\r\n            isOwner,\r\n            listItemsSubject,\r\n            isDisplayBank,\r\n            render\r\n        }\r\n    },\r\n\r\n    create() {\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n        this.getItems()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = [],\r\n                this.sendData = {\r\n                    'questions': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                        'deleteResult': [], // Question fill and essay\r\n                        'updateResults': [] // Question fill and essay\r\n                    },\r\n                    'choices': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                    }\r\n                }\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getQuestionTestUpdate(this.idTest, paramsQuestion);\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    this.itemsSubject = responseQuestions.data?.itemsSubject\r\n                    this.isOwner = responseQuestions.data?.isOwner\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.currentPage = pages.currentPage\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    current_page: this.currentPage,\r\n                    type: 2\r\n                    // 1: Do 2: Update 3: History\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical.data\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n        async getItems() {\r\n            const response = await getTest(this.idTest)\r\n            this.test = response.data\r\n            const responseItems = await getItems(this.test.subject_id)\r\n            this.listItemsSubject = responseItems.data\r\n            console.log(\"List items\")\r\n            console.log(this.listItemsSubject)\r\n        },\r\n        addlistQuestionFollow(id) {\r\n            // Add id question to list question update\r\n            console.log(id)\r\n            this.listQuestionFollow.add(id);\r\n        },\r\n        choiceAnswer(id) {\r\n            var answer = document.getElementById(\"question_\" + id);\r\n            answer.classList.add(\"answer-content-choice\");\r\n        },\r\n        clickCallback(pageNum) {\r\n            console.log(pageNum)\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        async addPage() {\r\n            this.totalPage += 1\r\n            let data = {\r\n                'id': this.idTest,\r\n                'total_page': this.totalPage\r\n            }\r\n            try {\r\n                await updateTest(data);\r\n                this.clickCallback(parseInt(this.currentPage) + 1)\r\n            } catch (error) {\r\n                console.log(error)\r\n            } finally {\r\n                this.refreshData()\r\n            }\r\n\r\n        },\r\n        Next(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        displayBank() {\r\n            this.isDisplayBank = true\r\n        },\r\n        closeBank() {\r\n            this.isDisplayBank = false\r\n        },\r\n        displayCreateQuestionTypeFirst() {\r\n            this.displayTypeCreateFirst = !this.displayTypeCreateFirst\r\n        },\r\n        displayCreateQuestionTypeEnd() {\r\n            this.displayTypeCreateEnd = !this.displayTypeCreateEnd\r\n        },\r\n        createQuestion(type) {\r\n            let newQuestion = {\r\n            }\r\n            newQuestion.question = { 'question_id': 'new_' + this.indexNewQuestion, 'page': this.currentPage, \"type\": type, 'index': this.questions.length, 'result_id': \"\", 'contentResult': \"\", 'scope': 1, 'dependence_id': this.idTest }\r\n            if (type == 1 || type == 3) {\r\n                newQuestion.question.result_id = \"new\"\r\n            }\r\n            this.indexNewQuestion++\r\n            newQuestion.choices = []\r\n            this.questions.push(newQuestion)\r\n            let item = { 'id': newQuestion.question.question_id, 'page': this.currentPage, 'index': this.questions.length, 'type': 0 }\r\n            this.numericalQuestion.data.splice(this.startIndex + this.questions.length - 2, 0, item);\r\n            setTimeout(() => {\r\n                let question = document.getElementById('question_' + newQuestion.question.question_id);\r\n                this.displayTypeCreateFirst = false\r\n                this.displayTypeCreateEnd = false\r\n                question.scrollIntoView();\r\n            }, 500)\r\n        },\r\n\r\n        deleteQuestion(deleteQuestion) {\r\n\r\n            // this.questions\r\n            this.render = false\r\n            this.questions.splice(deleteQuestion.index - this.startIndex, 1)\r\n            this.numericalQuestion.data.splice(deleteQuestion.index, 1)\r\n            // console.log(\"Delete \" + ('' + deleteQuestion.id).includes('new_'))\r\n            let q = this.$refs['question_' + deleteQuestion.id][0]\r\n            if (deleteQuestion.result != undefined) {\r\n                this.sendData.deleteResults.push(deleteQuestion.result)\r\n            }\r\n            if (('' + deleteQuestion.id).includes('new_')) {\r\n                if (this.questionsCreate.get(deleteQuestion.id) !== undefined) {\r\n                    this.questionsCreate.delete(deleteQuestion.id)\r\n                }\r\n            } else {\r\n\r\n                this.sendData.choices.delete = [...Array.from(q.chooseDelete)]\r\n                this.questionsDelete.push(deleteQuestion.id)\r\n            }\r\n            this.$nextTick(() => {\r\n                this.render = true\r\n            })\r\n        },\r\n        moveQuestion(page, id) {\r\n\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.menu-create {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.menu-create-end {\r\n    display: flex;\r\n}\r\n\r\n.pagination {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.choice-type-create {\r\n    display: flex;\r\n    flex-direction: column;\r\n    cursor: pointer;\r\n}\r\n\r\n.create-button-type {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    padding: 2px 4px;\r\n    height: 35px;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.create-button-first {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.create-button-first:active {\r\n    box-shadow: 0 2px #666;\r\n    transform: translateY(4px);\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.update-create-question-button:active {\r\n    box-shadow: 0 2px #666;\r\n    transform: translateY(4px);\r\n}\r\n\r\n.info-list-question {\r\n    width: 78%;\r\n    margin-top: 3px;\r\n    margin-right: 2px;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.end-action {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>"]},"metadata":{},"sourceType":"module"}
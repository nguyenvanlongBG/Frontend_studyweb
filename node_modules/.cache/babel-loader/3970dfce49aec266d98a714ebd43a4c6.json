{"ast":null,"code":"import QuestionComponent from '../Question/QuestionComponent.vue';\nimport Paginate from 'vuejs-paginate-next';\nimport { getQuestionTestUpdate } from '../../services/question';\nimport { getNumericalQuestion } from '../../services/test';\nimport { ref } from '@vue/reactivity';\nimport { useRoute } from 'vue-router';\nimport LoadingComponent from '../common/LoadingComponent.vue';\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\";\nexport default {\n  name: \"MarkTestComponent\",\n  components: {\n    QuestionComponent,\n    paginate: Paginate,\n    NavbarListComponent,\n    LoadingComponent\n  },\n\n  setup() {\n    const idTest = parseInt(useRoute().params.idTest);\n    const isLoading = ref(false);\n    const canUpdate = ref(true);\n    const isUpdateEssay = ref(false);\n    const questions = ref([]);\n    const currentPage = ref(1);\n    const totalPage = ref(1);\n    const startIndex = ref(1);\n    const numericalQuestion = ref([]);\n    const moveTo = ref(\"\");\n    const render = ref(true);\n    const indexNewQuestion = ref(0);\n    const sendData = ref({\n      'questions': {\n        'create': [],\n        'update': [],\n        'delete': [],\n        'deleteResults': [],\n        // Question fill and essay\n        'updateResults': [] // Question fill and essay\n\n      },\n      'choices': {\n        'create': [],\n        'update': [],\n        'delete': []\n      }\n    }); // const answersUpdate = ref([])\n    // const answersDelete = ref([])\n    // const answersCreate = ref([])\n\n    return {\n      idTest,\n      isLoading,\n      canUpdate,\n      isUpdateEssay,\n      questions,\n      currentPage,\n      totalPage,\n      startIndex,\n      numericalQuestion,\n      moveTo,\n      sendData,\n      indexNewQuestion,\n      render\n    };\n  },\n\n  create() {\n    this.$watch(() => this.$route.query, () => {\n      this.handleGetData();\n    });\n  },\n\n  mounted() {\n    this.handleGetData();\n  },\n\n  methods: {\n    refreshData() {\n      this.listQuestionFollow = new Set(), this.questionsDelete = [], this.sendData = {\n        'questions': {\n          'create': [],\n          'update': [],\n          'delete': [],\n          'deleteResult': [],\n          // Question fill and essay\n          'updateResults': [] // Question fill and essay\n\n        },\n        'choices': {\n          'create': [],\n          'update': [],\n          'delete': []\n        }\n      };\n    },\n\n    async handleGetData() {\n      var paramsQuestion = {\n        current_page: this.currentPage\n      };\n\n      try {\n        const responseQuestions = await getQuestionTestUpdate(this.idTest, paramsQuestion); // console.log(responseQuestions)\n\n        if (responseQuestions) {\n          this.questions = responseQuestions.data?.questions;\n          let pages = responseQuestions.data?.pages;\n          this.startIndex = pages.startIndex;\n          this.totalPage = pages.totalPage;\n        }\n\n        var paramsNumerical = {\n          current_page: this.currentPage,\n          type: 1 // 1: Do 2: Update 3: History\n\n        };\n        const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical);\n\n        if (responseNumerical) {\n          this.numericalQuestion = responseNumerical;\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    choiceAnswer(id) {\n      var answer = document.getElementById(\"question_\" + id);\n      answer.classList.add(\"answer-content-choice\");\n    },\n\n    clickCallback(pageNum) {\n      this.currentPage = pageNum;\n      this.handleGetData();\n    },\n\n    Next(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    Prev(pageNum) {\n      this.page = pageNum;\n      this.handleGetData();\n    },\n\n    moveQuestion(page, id) {\n      if (page == this.currentPage) {\n        this.moveTo = id;\n        let question = document.getElementById(id);\n        question.scrollIntoView();\n      } else {\n        this.currentPage = page;\n        this.moveTo = id;\n        this.handleGetData();\n        setTimeout(() => {\n          let question = document.getElementById(id);\n          question.scrollIntoView();\n        }, 1000);\n      }\n    },\n\n    save() {\n      let sendData = {\n        'exam_id': 2,\n        'answers': new Set()\n      };\n      this.questions.forEach(question => {\n        let q = this.$refs['question_' + question.question.question_id];\n\n        if (q[0].answer != -1) {\n          let answer = {\n            'question_id': question.question.question_id,\n            'answer': q[0].answer\n          };\n          sendData.answers.add(answer);\n        }\n      });\n      console.log(Array.from(sendData.answers));\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["QuestionComponent","Paginate","getQuestionTestUpdate","getNumericalQuestion","ref","useRoute","LoadingComponent","NavbarListComponent","name","components","paginate","setup","idTest","parseInt","params","isLoading","canUpdate","isUpdateEssay","questions","currentPage","totalPage","startIndex","numericalQuestion","moveTo","render","indexNewQuestion","sendData","create","$watch","$route","query","handleGetData","mounted","methods","refreshData","listQuestionFollow","Set","questionsDelete","paramsQuestion","current_page","responseQuestions","data","pages","paramsNumerical","type","responseNumerical","choiceAnswer","id","answer","document","getElementById","classList","add","clickCallback","pageNum","Next","page","Prev","moveQuestion","question","scrollIntoView","setTimeout","save","forEach","q","$refs","question_id","answers","console","log","Array","from"],"sourceRoot":"","sources":["G:\\Dự án Web học tập\\studyweb\\src\\components\\Test\\MarkTestComponent.vue"],"sourcesContent":["<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n    <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n    <div class=\"info-list-question\">\r\n        <h1>Làm bài thi</h1>\r\n        <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n        <template v-else>\r\n            <div class=\"page\">\r\n                <h2>\r\n                    Trang {{ currentPage }}\r\n                </h2>\r\n            </div>\r\n            <QuestionComponent v-for=\"(question, index) in  questions\" :key=\"index\" :question=\"question\"\r\n                :ref=\"'question_' + question.question.question_id\" :id=\"'question_' + question.question.question_id\"\r\n                :index=\"startIndex + index\" :type=\"1\" :send=\"sendData\" />\r\n            <div class=\"end-action\">\r\n\r\n                <button class=\"update-create-question-button\" @click=\"save\" v-if=\"canUpdate\">\r\n                    Lưu câu trả lời\r\n                </button>\r\n            </div>\r\n            <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                :active-class=\"'active-class'\">\r\n            </paginate>\r\n        </template>\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nimport QuestionComponent from '../Question/QuestionComponent.vue';\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getQuestionTestUpdate } from '../../services/question'\r\nimport { getNumericalQuestion } from '../../services/test'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nexport default {\r\n    name: \"MarkTestComponent\",\r\n    components: {\r\n        QuestionComponent,\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        LoadingComponent\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const isLoading = ref(false)\r\n        const canUpdate = ref(true)\r\n        const isUpdateEssay = ref(false)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const sendData = ref({\r\n            'questions': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n                'deleteResults': [], // Question fill and essay\r\n                'updateResults': [] // Question fill and essay\r\n\r\n            },\r\n            'choices': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n            }\r\n        })\r\n        // const answersUpdate = ref([])\r\n        // const answersDelete = ref([])\r\n        // const answersCreate = ref([])\r\n        return {\r\n            idTest,\r\n            isLoading,\r\n            canUpdate,\r\n            isUpdateEssay,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            sendData,\r\n            indexNewQuestion,\r\n            render\r\n        }\r\n    },\r\n\r\n    create() {\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = [],\r\n                this.sendData = {\r\n                    'questions': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                        'deleteResult': [], // Question fill and essay\r\n                        'updateResults': [] // Question fill and essay\r\n                    },\r\n                    'choices': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                    }\r\n                }\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getQuestionTestUpdate(this.idTest, paramsQuestion);\r\n                // console.log(responseQuestions)\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    current_page: this.currentPage,\r\n                    type: 1\r\n                    // 1: Do 2: Update 3: History\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n\r\n        choiceAnswer(id) {\r\n            var answer = document.getElementById(\"question_\" + id);\r\n            answer.classList.add(\"answer-content-choice\");\r\n        },\r\n        clickCallback(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Next(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        moveQuestion(page, id) {\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n\r\n\r\n            }\r\n        },\r\n        save() {\r\n            let sendData = { 'exam_id': 2, 'answers': new Set() }\r\n            this.questions.forEach(question => {\r\n                let q = this.$refs['question_' + question.question.question_id]\r\n                if (q[0].answer != -1) {\r\n                    let answer = { 'question_id': question.question.question_id, 'answer': q[0].answer }\r\n                    sendData.answers.add(answer)\r\n                }\r\n\r\n            });\r\n            console.log(Array.from(sendData.answers))\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.create-button-first {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.info-list-question {\r\n    width: 79%;\r\n    margin-top: 3px;\r\n    margin-right: 2px;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.end-action {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"info-list-question\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Chấm bài thi\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = {\n  class: \"page\"\n};\nconst _hoisted_4 = {\n  class: \"end-action\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavbarListComponent = _resolveComponent(\"NavbarListComponent\");\n\n  const _component_LoadingComponent = _resolveComponent(\"LoadingComponent\");\n\n  const _component_QuestionComponent = _resolveComponent(\"QuestionComponent\");\n\n  const _component_paginate = _resolveComponent(\"paginate\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <NavbarListComponent /> \"), _createVNode(_component_NavbarListComponent, {\n    numericalQuestion: $setup.numericalQuestion,\n    onMoveQuestion: $options.moveQuestion\n  }, null, 8\n  /* PROPS */\n  , [\"numericalQuestion\", \"onMoveQuestion\"]), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, $setup.isLoading ? (_openBlock(), _createBlock(_component_LoadingComponent, {\n    key: 0\n  })) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, \" Trang \" + _toDisplayString($setup.currentPage), 1\n  /* TEXT */\n  )]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"h2\", null, \"Câu \" + _toDisplayString($setup.startIndex + index), 1\n    /* TEXT */\n    ), _createVNode(_component_QuestionComponent, {\n      question: question,\n      ref_for: true,\n      ref: 'question_' + question.question.question_id,\n      id: 'question_' + question.question.question_id,\n      index: $setup.startIndex + index,\n      type: 1,\n      send: $setup.sendData\n    }, null, 8\n    /* PROPS */\n    , [\"question\", \"id\", \"index\", \"send\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createElementVNode(\"div\", _hoisted_4, [$setup.canUpdate ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"update-create-question-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.save && $options.save(...args))\n  }, \" Lưu câu trả lời \")) : _createCommentVNode(\"v-if\", true)]), _createVNode(_component_paginate, {\n    \"page-count\": $setup.totalPage,\n    \"page-range\": 3,\n    \"margin-pages\": 2,\n    \"click-handler\": $options.clickCallback,\n    \"prev-text\": 'Prev',\n    \"next-text\": 'Next',\n    \"container-class\": 'pagination',\n    \"page-class\": 'page-item',\n    \"active-class\": 'active-class'\n  }, null, 8\n  /* PROPS */\n  , [\"page-count\", \"click-handler\"])], 64\n  /* STABLE_FRAGMENT */\n  ))])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAKSA,KAAK,EAAC;;;gCACPC,oBAAqB,IAArB,EAAqB,IAArB,EAAI,cAAJ,EAAgB;AAAA;AAAhB;;;EAISD,KAAK,EAAC;;;EAWNA,KAAK,EAAC;;;;;;;;;;;6DApBnBE,kDAEAC,aAA2FC,8BAA3F,EAA2F;IAArEC,iBAAiB,EAAEC,wBAAkD;IAA9BC,cAAY,EAAEC;EAAgB,CAA3F;;EAAA,4CAEAP,oBA6BM,KA7BN,cA6BM,CA5BFQ,UA4BE,EA3BsBH,kCAAxBI,aAAsDC,2BAAtD,EAAsD;IAAAC;EAAA,CAAtD,oBACAC,oBAwBWC,SAxBX,EAwBW;IAAAF;EAAA,CAxBX,EAwBW,CAtBPX,oBAIM,KAJN,cAIM,CAHFA,oBAEK,IAFL,EAEK,IAFL,EAAI,YACMc,iBAAGT,kBAAH,CADV,EACwB;EAAA;EADxB,CAGE,CAJN,CAsBO,qBAjBPO,oBAKMC,SALN,EAKM,IALN,EAKME,YAL4BV,gBAK5B,EALqC,CAA9BW,QAA8B,EAApBC,KAAoB,KAAf;yBAA5BL,oBAKM,KALN,EAKM;MALwCD,GAAG,EAAEM;IAK7C,CALN,EAAwD,CACpDjB,oBAAqC,IAArC,EAAqC,IAArC,EAAI,SAAIc,iBAAGT,oBAAaY,KAAhB,CAAR,EAA6B;IAAA;IAA7B,CADoD,EAEpDf,aAEuBgB,4BAFvB,EAEuB;MAFHF,QAAQ,EAAEA,QAEP;mBAAA;MAFkBG,GAAG,gBAAgBH,QAAQ,CAACA,QAAT,CAAkBI,WAEvD;MADlBC,EAAE,gBAAgBL,QAAQ,CAACA,QAAT,CAAkBI,WAClB;MADgCH,KAAK,EAAEZ,oBAAaY,KACpD;MAD4DK,IAAI,EAAE,CAClE;MAAlBC,IAAI,EAAElB;IAAY,CAFvB;;IAAA,sCAFoD,CAAxD;GAKM,CALN;;EAAA,CAiBO,GAXPL,oBAKM,KALN,cAKM,CAHgEK,kCAAlEO,oBAES,QAFT,EAES;UAAA;IAFDb,KAAK,EAAC,+BAEL;IAFsCyB,OAAK,yCAAEjB,uCAAF;EAE3C,CAFT,EAA6E,mBAA7E,sCAGE,CALN,CAWO,EALPL,aAGWuB,mBAHX,EAGW;IAHA,cAAYpB,gBAGZ;IAHwB,cAAY,CAGpC;IAHwC,gBAAc,CAGtD;IAH0D,iBAAeE,sBAGzE;IAFN,aAAW,MAEL;IAFc,aAAW,MAEzB;IAFkC,mBAAiB,YAEnD;IAFkE,cAAY,WAE9E;IADN,gBAAc;EACR,CAHX;;EAAA,kCAKO,CAxBX;;EAAA,EA0BE,CA7BN","names":["class","_createElementVNode","_createCommentVNode","_createVNode","_component_NavbarListComponent","numericalQuestion","$setup","onMoveQuestion","$options","_hoisted_2","_createBlock","_component_LoadingComponent","key","_createElementBlock","_Fragment","_toDisplayString","_renderList","question","index","_component_QuestionComponent","ref","question_id","id","type","send","onClick","_component_paginate"],"sourceRoot":"","sources":["G:\\Dự án Web học tập\\studyweb\\src\\components\\Exam\\MarkExamComponent.vue"],"sourcesContent":["<template  v-if=\"render\">\r\n    <!-- <NavbarListComponent /> -->\r\n\r\n    <NavbarListComponent :numericalQuestion=\"numericalQuestion\" @moveQuestion=\"moveQuestion\" />\r\n\r\n    <div class=\"info-list-question\">\r\n        <h1>Chấm bài thi</h1>\r\n        <LoadingComponent v-if=\"isLoading\"></LoadingComponent>\r\n        <template v-else>\r\n\r\n            <div class=\"page\">\r\n                <h2>\r\n                    Trang {{ currentPage }}\r\n                </h2>\r\n            </div>\r\n            <div v-for=\"(question, index) in  questions\" :key=\"index\">\r\n                <h2>Câu {{ startIndex + index }}</h2>\r\n                <QuestionComponent :question=\"question\" :ref=\"'question_' + question.question.question_id\"\r\n                    :id=\"'question_' + question.question.question_id\" :index=\"startIndex + index\" :type=\"1\"\r\n                    :send=\"sendData\" />\r\n            </div>\r\n            <div class=\"end-action\">\r\n\r\n                <button class=\"update-create-question-button\" @click=\"save\" v-if=\"canUpdate\">\r\n                    Lưu câu trả lời\r\n                </button>\r\n            </div>\r\n            <paginate :page-count=\"totalPage\" :page-range=\"3\" :margin-pages=\"2\" :click-handler=\"clickCallback\"\r\n                :prev-text=\"'Prev'\" :next-text=\"'Next'\" :container-class=\"'pagination'\" :page-class=\"'page-item'\"\r\n                :active-class=\"'active-class'\">\r\n            </paginate>\r\n\r\n        </template>\r\n\r\n    </div>\r\n\r\n</template>\r\n<script>\r\nimport QuestionComponent from '../Question/QuestionComponent.vue';\r\nimport Paginate from 'vuejs-paginate-next';\r\nimport { getQuestionTestUpdate } from '../../services/question'\r\nimport { getNumericalQuestion } from '../../services/test'\r\nimport { ref } from '@vue/reactivity'\r\nimport { useRoute } from 'vue-router';\r\nimport LoadingComponent from '../common/LoadingComponent.vue';\r\nimport NavbarListComponent from \"../Test/NavbarListComponent.vue\"\r\nexport default {\r\n    name: \"MarkTestComponent\",\r\n    components: {\r\n        QuestionComponent,\r\n        paginate: Paginate,\r\n        NavbarListComponent,\r\n        LoadingComponent\r\n    },\r\n    setup() {\r\n        const idTest = parseInt(useRoute().params.idTest)\r\n        const idExam = parseInt(useRoute().params.idExam)\r\n        const isLoading = ref(false)\r\n        const canUpdate = ref(true)\r\n        const isUpdateEssay = ref(false)\r\n        const questions = ref([])\r\n        const currentPage = ref(1)\r\n        const totalPage = ref(1)\r\n        const startIndex = ref(1)\r\n        const numericalQuestion = ref([])\r\n        const moveTo = ref(\"\")\r\n        const render = ref(true)\r\n        const indexNewQuestion = ref(0)\r\n        const sendData = ref({\r\n            'questions': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n                'deleteResults': [], // Question fill and essay\r\n                'updateResults': [] // Question fill and essay\r\n\r\n            },\r\n            'choices': {\r\n                'create': [],\r\n                'update': [],\r\n                'delete': [],\r\n            }\r\n        })\r\n        // const answersUpdate = ref([])\r\n        // const answersDelete = ref([])\r\n        // const answersCreate = ref([])\r\n        return {\r\n            idTest,\r\n            idExam,\r\n            isLoading,\r\n            canUpdate,\r\n            isUpdateEssay,\r\n            questions,\r\n            currentPage,\r\n            totalPage,\r\n            startIndex,\r\n            numericalQuestion,\r\n            moveTo,\r\n            sendData,\r\n            indexNewQuestion,\r\n            render\r\n        }\r\n    },\r\n\r\n    create() {\r\n        this.$watch(\r\n            () => this.$route.query,\r\n            () => {\r\n                this.handleGetData()\r\n            }\r\n        )\r\n    },\r\n    mounted() {\r\n        this.handleGetData()\r\n    },\r\n    methods: {\r\n        refreshData() {\r\n            this.listQuestionFollow = new Set(),\r\n                this.questionsDelete = [],\r\n                this.sendData = {\r\n                    'questions': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                        'deleteResult': [], // Question fill and essay\r\n                        'updateResults': [] // Question fill and essay\r\n                    },\r\n                    'choices': {\r\n                        'create': [],\r\n                        'update': [],\r\n                        'delete': [],\r\n                    }\r\n                }\r\n        },\r\n        async handleGetData() {\r\n\r\n            var paramsQuestion = {\r\n                current_page: this.currentPage\r\n            };\r\n            try {\r\n                const responseQuestions = await getQuestionTestUpdate(this.idTest, paramsQuestion);\r\n                // console.log(responseQuestions)\r\n                if (responseQuestions) {\r\n                    this.questions = responseQuestions.data?.questions\r\n                    let pages = responseQuestions.data?.pages\r\n                    this.startIndex = pages.startIndex\r\n                    this.totalPage = pages.totalPage\r\n                }\r\n                var paramsNumerical = {\r\n                    current_page: this.currentPage,\r\n                    exam_id: this.idExam,\r\n                    type: 3\r\n                    // 1: Do 2: Update 3: History\r\n                };\r\n                const responseNumerical = await getNumericalQuestion(this.idTest, paramsNumerical)\r\n                if (responseNumerical) {\r\n                    this.numericalQuestion = responseNumerical.data\r\n                }\r\n            } finally {\r\n                this.isLoading = false\r\n            }\r\n        },\r\n\r\n        choiceAnswer(id) {\r\n            var answer = document.getElementById(\"question_\" + id);\r\n            answer.classList.add(\"answer-content-choice\");\r\n        },\r\n        clickCallback(pageNum) {\r\n            this.currentPage = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Next(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        Prev(pageNum) {\r\n            this.page = pageNum\r\n            this.handleGetData()\r\n        },\r\n        moveQuestion(page, id) {\r\n            if (page == this.currentPage) {\r\n                this.moveTo = id;\r\n                let question = document.getElementById(id);\r\n                question.scrollIntoView();\r\n            } else {\r\n                this.currentPage = page;\r\n                this.moveTo = id;\r\n                this.handleGetData();\r\n                setTimeout(() => {\r\n                    let question = document.getElementById(id);\r\n                    question.scrollIntoView();\r\n                }, 1000)\r\n\r\n\r\n            }\r\n        },\r\n        save() {\r\n            let sendData = { 'exam_id': 2, 'answers': new Set() }\r\n            this.questions.forEach(question => {\r\n                let q = this.$refs['question_' + question.question.question_id]\r\n                if (q[0].answer != -1) {\r\n                    let answer = { 'question_id': question.question.question_id, 'answer': q[0].answer }\r\n                    sendData.answers.add(answer)\r\n                }\r\n\r\n            });\r\n            console.log(Array.from(sendData.answers))\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.page {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n}\r\n\r\n.margin-bottom10px {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.create-button-first {\r\n    margin-left: 2px;\r\n    margin-top: 2px;\r\n    height: 35px;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.update-create-question-button {\r\n    margin-left: 5px;\r\n    margin-top: 2px;\r\n    height: 45px;\r\n    padding: 5px;\r\n    font-size: 20px;\r\n    font-weight: 400;\r\n    box-shadow: 0 8px #999;\r\n    border-radius: 5px;\r\n    border: 2px solid #ea4f4c;\r\n    background-color: #222;\r\n    color: white;\r\n    text-align: center;\r\n    justify-content: center;\r\n    text-decoration: none;\r\n}\r\n\r\n.info-list-question {\r\n    width: 78%;\r\n    margin-top: 3px;\r\n    margin-right: 2px;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.end-action {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\";\r\n</style>"]},"metadata":{},"sourceType":"module"}